from flask import Flask, jsonify, request
from flask_httpauth import HTTPBasicAuth
from malwareDbCon import malwareDbCon
from helpers import parseConfig, getDomain
import bcrypt


config = parseConfig('config.yaml')
redisConfig = config['REDIS']
userConfig = config['USERS']

service = Flask(__name__)
auth = HTTPBasicAuth()
dbCon = malwareDbCon(redisConfig['hostname'], redisConfig['port'], redisConfig['key'])

@auth.verify_password
def verifyPassword(username, password):
    return username in userConfig and bcrypt.checkpw(password.encode('utf8'), userConfig[username].encode('utf8'))    

@auth.error_handler
def unauthorized():
    return jsonify({'error': 'Unauthorized'})

# Home screen for the service. TODO: Add link to instructions or remove this function if not needed.
@service.route("/")
@auth.login_required
def home():
    return "Malware URL lookup service!"

# Function to provide information about URL after checking malware DB. 
@service.route('/v1/urlinfo/<path:resource_url_with_query_string>',methods=['GET'])
@auth.login_required
def isMalware(resource_url_with_query_string):
    # Format the url before checking if malware. 
    url = getDomain(resource_url_with_query_string)
    if url == "":
        return jsonify({'error': 'Cannot parse url. Invalid format.'})
    return jsonify(dbCon.isMalware(url))

# Function to add new URLs to malware DB.
@service.route('/v1/urlinfo',methods=['POST'])
def addMalware():
    if not 'url' in request.json:
        return jsonify({'error': 'No field \"url\" in message body'})
    resource_url = request.json['url']
    # POST requests should be in a specific format but we will format the url here anyway. 
    url = getDomain(resource_url)
    if url == "":
        return jsonify({'error': 'Cannot parse url. Invalid format.'})
    return jsonify(dbCon.addMalware(url))

# Start the service. Currently hosted on localhost:5000. TODO: Change the default and host it on web if required.
if __name__ == "__main__":
    service.run()