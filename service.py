from flask import Flask, jsonify, request
from flask_httpauth import HTTPBasicAuth
import sqlite3
import bcrypt
from urllib.parse import urlparse
from malwareDbCon import malwareDbCon


service = Flask(__name__)
auth = HTTPBasicAuth()

# Add default user and password. TODO: Hash password instead of storing in plain text.
# User list can be moved to a db if we have use case for multiple users.
# In a prod service, we should use token based auth. 
users = {
    #User and hashed password. Because this is a demo service, password is "someComplexPassword"
    "default": '$2b$12$mix29YjcVnpv9JEPbrZloeS.yuo23HZwCTmmx50wevY8mvNOWzoVG'
}

@auth.verify_password
def verify_password(username, password):
    return username in users and bcrypt.checkpw(password.encode('utf8'), users.get(username).encode('utf8'))    

@auth.error_handler
def unauthorized():
    return jsonify({'error': 'Unauthorized'})

dbCon = malwareDbCon("malwareList.db")

# Home screen for the service. TODO: Add link to instructions or remove this function if not needed.
@service.route("/")
@auth.login_required
def home():
    return "Malware URL lookup service!"

# Function to provide information about URL after checking malware DB. 
@service.route('/v1/urlinfo/<path:resource_url_with_query_string>',methods=['GET'])
@auth.login_required
def isMalware(resource_url_with_query_string):
    # Format the url before checking if malware. 
    url = getDomain(resource_url_with_query_string)
    print(url)
    if url == "":
        return jsonify({'error': 'Cannot parse url. Invalid format.'})
    return jsonify(dbCon.isMalware(url))

# Function to add new URLs to malware DB.
@service.route('/v1/urlinfo',methods=['POST'])
def addMalware():
    if not 'url' in request.json:
        return jsonify({'error': 'No field \"url\" in message body'})
    resource_url = request.json['url']
    # POST requests should be in a specific format but we will format the url here anyway. 
    url = getDomain(resource_url)
    if url == "":
        return jsonify({'error': 'Cannot parse url. Invalid format.'})
    return jsonify(dbCon.addMalware(url))

# Parse url to return only top level and second level domain.
# Ex: https://www.sample.malware.com/path/query will be parsed to malware.com
def getDomain(resource_url):
    hostname = urlparse(resource_url).hostname
    if not hostname:
        return ""
    return'.'.join(hostname.split('.')[-2:])

# Start the service. Currently hosted on localhost:5000. TODO: Change the default and host it on web if required.
if __name__ == "__main__":
    service.run()