import unittest, os, yaml
from malwareDbCon import MalwareDbCon
from helpers import getDomain, readYaml, parseConfig

# This file contains unit tests for the project. Please use the test.py script to run the tests.
# The script starts a redis server at 127.0.0.1:6379 with default settings which is required by some tests.

class TestMalwareDbCon(unittest.TestCase):
    
    def setUp(self):
        self.host = '127.0.0.1'
        self.port = '6379'
        self.key = ''
    
    def testDbCon_success(self):
        try:
            m = MalwareDbCon(self.host, self.port, self.key)
            m.dbCon.ping()
        except Exception as e:
            self.fail("Connecting to valid redis config raised an exception: " + str(e) + " Please ensure redis server is running.")

    def testDbCon_fail(self):
        e = False
        try:
            m = MalwareDbCon('invalid', 'invalid', 'invalid')
            m.dbCon.ping()
        except Exception:
            e = True
        if not e:
            self.fail("Connecting to invalid redis config should raise an exception.")

#Let the malwareDBCon and redis handle exceptions for connection issues for rest of the tests.
     
    def testAddMalware_new(self):
        url = 'testurl.com' 
        m = MalwareDbCon(self.host, self.port, self.key)
        m.dbCon.delete(url)
        response = m.addMalware(url)['response']
        r = m.dbCon.get(url)
        self.assertNotEqual(r, None)
        self.assertEqual(response, 'success')
        
    def testAddMalware_exists(self):
        url = 'testurl.com' 
        m = MalwareDbCon(self.host, self.port, self.key)
        m.dbCon.set(url, '')
        response = m.addMalware(url)
        if 'response' not in response:
            self.fail("addMalware returned an error: " + response['error']) 
        r = m.dbCon.get(url)
        self.assertNotEqual(r, None)
        self.assertEqual(response['response'], 'success')

    def testIsMalware_not_exists(self):
        url = 'testurl.com' 
        m = MalwareDbCon(self.host, self.port, self.key)
        m.dbCon.delete(url)
        response = m.isMalware(url)
        if 'response' not in response:
            self.fail("addMalware returned an error: " + response['error']) 
        self.assertEqual(response['response'], 'safe')

    def testIsMalware_exists(self):
        url = 'testurl.com' 
        m = MalwareDbCon(self.host, self.port, self.key)
        m.dbCon.set(url, '')
        response = m.isMalware(url)
        if 'response' not in response:
            self.fail("addMalware returned an error: " + response['error']) 
        self.assertEqual(response['response'], 'unsafe')

class TestGetDomainHelper(unittest.TestCase):
    
    def testGetDomain_valid(self):
        url = "https://www.sample.testurl.com/path/query"
        expected = 'testurl.com'
        actual = getDomain(url)
        self.assertEqual(expected, actual)
    
    def testGetDomain_invalid(self):
        url = 'invalid_url'
        expected = ''
        actual = getDomain(url)
        self.assertEqual(expected, actual)
        self.assertEqual(True, True)

class TestParseConfig(unittest.TestCase):
    
    def testParseConfig_valid(self):
        yaml_dict = {'REDIS':{'hostname':'h', 'port':'p', 'key':'k'}, 'USERS': {'user':'hashedpw', 'user2':'hashedpw'}}
        file_path = os.path.join(os.getcwd(), 'test.yaml')
        with open(file_path, 'w+') as f:
            yaml.dump(yaml_dict, f)
        try: 
            parseConfig('test.yaml')
        except Exception as e:
            self.fail("Parsing a valid config raised an exception: " + str(e))
        finally:
            os.remove(file_path)
        
    def testParseConfig_invalid_redis(self):
        e = False
        yaml_dict = {'USERS': {'user':'hashedpw', 'user2':'hashedpw'}}
        file_path = os.path.join(os.getcwd(), 'test.yaml')
        with open(file_path, 'w+') as f:
            yaml.dump(yaml_dict, f)
        try: 
            parseConfig('test.yaml')
        except Exception:
            e = True
        finally:
            os.remove(file_path)
        if not e:
            self.fail("Parsing an invalid config should raise an exception.")

    def testParseConfig_invalid_redis_hostname(self):
        e = False
        yaml_dict = {'REDIS':{'port':'p', 'key':'k'}, 'USERS': {'user':'hashedpw', 'user2':'hashedpw'}}
        file_path = os.path.join(os.getcwd(), 'test.yaml')
        with open(file_path, 'w+') as f:
            yaml.dump(yaml_dict, f)
        try: 
            parseConfig('test.yaml')
        except Exception:
            e = True
        finally:
            os.remove(file_path)
        if not e:
            self.fail("Parsing an invalid config should raise an exception.")

    def testParseConfig_invalid_redis_port(self):
        e = False
        yaml_dict = {'REDIS':{'hostname':'h', 'key':'k'}, 'USERS': {'user':'hashedpw', 'user2':'hashedpw'}}
        file_path = os.path.join(os.getcwd(), 'test.yaml')
        with open(file_path, 'w+') as f:
            yaml.dump(yaml_dict, f)
        try: 
            parseConfig('test.yaml')
        except Exception:
            e = True
        finally:
            os.remove(file_path)
        if not e:
            self.fail("Parsing an invalid config should raise an exception.")

    def testParseConfig_invalid_redis_key(self):
        e = False
        yaml_dict = {'REDIS':{'hostname':'h', 'port':'p'}, 'USERS': {'user':'hashedpw', 'user2':'hashedpw'}}
        file_path = os.path.join(os.getcwd(), 'test.yaml')
        with open(file_path, 'w+') as f:
            yaml.dump(yaml_dict, f)
        try: 
            parseConfig('test.yaml')
        except Exception:
            e = True
        finally:
            os.remove(file_path)
        if not e:
            self.fail("Parsing an invalid config should raise an exception.")
    
    def testParseConfig_invalid_redis_users(self):
        e = False
        yaml_dict = {'REDIS':{'hostname':'h', 'port':'p', 'key':'k'}}
        file_path = os.path.join(os.getcwd(), 'test.yaml')
        with open(file_path, 'w+') as f:
            yaml.dump(yaml_dict, f)
        try: 
            parseConfig('test.yaml')
        except Exception:
            e = True
        finally:
            os.remove(file_path)
        if not e:
            self.fail("Parsing an invalid config should raise an exception.")
    
#Run tests
unittest.main()
