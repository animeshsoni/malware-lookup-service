import sqlite3
import json

class malwareDbCon:
    def __init__(self, dbName) -> None:
        self.name = dbName
        try:
            #Open a connection to DB. (Creates one if it doesn't exist)
            dbCon = sqlite3.connect(self.name)
            dbCursor = dbCon.cursor()
            #Check if malwareUrls table exists in db
            dbResult = dbCursor.execute("SELECT name FROM sqlite_master WHERE name='malwareUrls'")
            if dbResult.fetchone() == None:
                #Create table if it doesn't exist
                dbCursor.execute("CREATE TABLE malwareUrls(url varchar(255) NOT NULL, PRIMARY KEY (url))")
                # Generate fake list of malwares to experiment with.
                for i in range(500):
                    dbCursor.execute("INSERT INTO malwareUrls VALUES ('malware" + str(i) + ".com')")
                    dbCon.commit()
            dbCursor.close()
        except sqlite3.Error as error:
            print("Database error: " + str(error))
        finally:
            if dbCon:
                dbCon.close()
    
    def isMalware(self, url) -> json:
        retVal = {'response': 'safe'}
        try:
            dbCon = sqlite3.connect(self.name)
            dbCursor = dbCon.cursor()
            dbResult = dbCursor.execute("SELECT url FROM malwareUrls WHERE url='" + url + "'")
            if dbResult.fetchone() != None:
                #Found in malware DB
                retVal = {'response': 'unsafe'}
            dbCursor.close()
        except sqlite3.Error as error:
            print("Database error: " + str(error))
            return {'error': 'Internal database error'}
        finally:
            if dbCon:
                dbCon.close()
        return retVal

    def addMalware(self, url) -> json:
        mal =  self.isMalware(url)
        if 'response' in mal and mal['response'] == 'unsafe':     
            return {'error': 'url already exists in db'}
        try:
            dbCon = sqlite3.connect(self.name)
            dbCursor = dbCon.cursor()
            dbResult = dbCursor.execute("INSERT INTO malwareUrls VALUES ('" + url + "')")
            dbCon.commit()
            dbCursor.close()
        except sqlite3.Error as error:
            print("Database error: " + str(error))
            return {'error': 'Internal database error'}
        finally:
            if dbCon:
                dbCon.close()
        return {'response': 'success'}
