import json, redis, logging

# This class provides utitily functions to connect and interact with redis database.
class MalwareDbCon:
    def __init__(self, host, port, key) -> None:
        self.host = host
        self.port = port
        self.key = key
        self.dbCon = None
        self.logger = logging.getLogger(__name__)
        logging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')
        try:
            #Open a connection to Redis.
            self.dbCon = redis.Redis(host=self.host, port=self.port, password=self.key, retry=True)
        except redis.RedisError as error:
            raise Exception("Unable to connect to redis server. Error: " + str(error))
    
    # Check if url exists in malware db
    def isMalware(self, url) -> json:
        retVal = {'response': 'safe'}
        try:
            result = self.dbCon.get(url)
        except redis.RedisError as error:
            self.logger.error('Redis error: ' + str(error))
            return {'error': 'Internal database error'}
        finally:
            if result is not None:
                #url exists in db
                retVal = {'response': 'unsafe'}
        return retVal

    # Add malware url to db.
    def addMalware(self, url) -> json:
        try:
            result = self.dbCon.set(url, '', nx=True)
        except redis.RedisError as error:
            self.logger.error('Redis error: ' + str(error))
            return {'error': 'Internal database error'}
        return {'response': 'success'}
